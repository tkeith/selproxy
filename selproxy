#!/usr/bin/env python3

import sys
import flask
from flask import Flask
import requests
from time import time, sleep
import logging
import redis
import random
import pickle
from contextlib import contextmanager
import subprocess
import os
import signal

TIMEOUT = 60
CHROMEDRIVER_TIMEOUT = 60

log = logging.getLogger(__name__)

app = Flask(__name__)

r = redis.StrictRedis()

def block_get_lock(name):
    wait = 0.1
    while True:
        if get_lock(name):
            return
        sleep(wait)
        wait *= 1.2

def get_lock(name):
    return bool(r.set(name, True, nx=True))

def close_lock(name):
    r.delete(name)

def get_port():
    while True:
        port = random.randint(14000, 14999)
        if get_lock('portlock-{}'.format(port)):
            return port

def watcher(sid):
    log.debug('Watcher running')
    sleep(TIMEOUT + 0.01)
    log.debug('Done intitial sleep')
    while True:
        try:
            with session_cm(sid) as sess:
                wait_time = sess.last_active + TIMEOUT - time()
                if wait_time < 0:
                    log.debug('Session timeout - {}'.format(sid))
                    sess.close()
                    return
        except SessionDoesNotExist:
            log.debug('Session closed on its own')
            return
        log.debug('Watcher sleeping for {}'.format(wait_time))
        sleep(wait_time + 0.01)

class Session(object):

    def __init__(self, request_data):
        self.last_active = time()
        self.port = get_port()
        self.url = 'http://localhost:{}'.format(self.port)
        log.debug('Launching chromedriver')
        self.pid = subprocess.Popen(['chromedriver', '--port={}'.format(self.port)], preexec_fn=os.setsid).pid
        log.debug('Chromedriver running, making session')
        for i in range(30):
            try:
                res = requests.post(self.url + '/session', timeout=CHROMEDRIVER_TIMEOUT, data=request_data)
            except Exception:
                continue
            else:
                break
        else:
            self.cleanup()
            raise Exception('Could not create session')
        assert res.status_code == 200
        log.debug('Made session')
        self.create_res = res.json()
        self.sid = self.create_res['sessionId']
        self.save()
        log.debug('Lauching watcher')
        subprocess.Popen([__file__, 'watcher', self.sid])
        log.debug('Watcher started')

    def renew(self):
        self.last_active = time()
        self.save()

    def save(self):
        r.set('session-{}'.format(self.sid), pickle.dumps(self))

    def cleanup(self):
        os.killpg(self.pid, signal.SIGTERM)
        close_lock('portlock-{}'.format(self.port))

    def close(self):
        log.debug('Closing session - {}'.format(self.sid))
        try:
            res = requests.delete('{}/session/{}'.format(self.url, self.sid), timeout=CHROMEDRIVER_TIMEOUT)
            assert res.status_code == 200
            self.close_res = res.json()
        finally:
            r.delete('session-{}'.format(self.sid))
            self.cleanup()

class SessionDoesNotExist(Exception): pass

@contextmanager
def session_cm(sid):
    block_get_lock('sessionlock-{}'.format(sid))
    try:
        sessdata = r.get('session-{}'.format(sid))
        if not sessdata:
            raise SessionDoesNotExist()
        sess = pickle.loads(sessdata)
        yield sess
    finally:
        close_lock('sessionlock-{}'.format(sid))

@app.route('/wd/hub/<path:url>', methods=['GET', 'POST', 'PUT', 'DELETE'])
def proxy(url):
    try:
        method = flask.request.method
        kwargs = dict()
        if method in ['POST', 'PUT']:
            kwargs['data'] = flask.request.get_data()
        if method == 'POST' and url == 'session':
            log.debug('Making new session')
            sess = Session(flask.request.get_data())
            log.debug('Made new session, returning')
            return flask.jsonify(sess.create_res)
        elif url.startswith('session/'):
            urlsplit = url.split('/')
            sid = urlsplit[1]
            log.debug('Getting session')
            with session_cm(sid) as sess:
                log.debug('Got session')
                if method == 'DELETE' and len(urlsplit) == 2:
                    sess.close()
                    return flask.jsonify(sess.close_res)
                else:
                    res = getattr(requests, method.lower())('{}/{}'.format(sess.url, url), timeout=CHROMEDRIVER_TIMEOUT, **kwargs)
                    assert res.status_code == 200
                    sess.renew()
        return flask.jsonify(res.json())
    except Exception as e:
        log.debug('Got exception: {}'.format(type(e)))
        return flask.jsonify(status=6, value=dict(message=type(e).__name__))

def main():
    if len(sys.argv) >= 2 and sys.argv[1] == 'watcher':
        watcher(sys.argv[2])
        return
    for i in range(60):
        try:
            r.get('test')
        except Exception:
            sleep(1)
            continue
        break
    else:
        raise Exception('Failed to connect to redis')
    r.flushdb()
    app.run(processes=10, port=4444)

if __name__ == '__main__':
    main()
